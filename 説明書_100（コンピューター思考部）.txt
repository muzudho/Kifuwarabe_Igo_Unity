────────────────────────────────────────
                    Kifuwarabe_Igo_Unity_Think.dll の解説             2016/05/17
                                                                       高橋 智史
────────────────────────────────────────


0. はじめに
===========


これは、2005年に山下宏さんの開発した囲碁思考部ライブラリ CgfThink をベースに
Unity / C# で使えるように書き換えた 思考ライブラリのインターフェース解説です。

乱数で適当な手を返すサンプルプログラムが付属しています。


1. 呼び出す関数

    （１）
    GUIは、対局の開始時に KifuwarabeThink を生成し、
    DoBegin( ) メソッドを  １回だけ  呼び出してください。

        例.
            KifuwarabeThink kwThink = new KifuwarabeThink();
            kwThink.DoBegin();

    （２）
    GUIは、コンピューターに指し手を返してほしいときに、
    DoBestmove( 〜 ) メソッドを呼び出してください。
    引数、返り値は後述します。

        例.
            int sq = kwThink.DoBestmove( 〜 );


    （３）
    GUIは、思考を一時停止／再開してほしいときに、
    SetPause( 〜 ) メソッドを呼び出してください。

        例.
            kwThink.SetPause( true );            // 一時停止するとき
            kwThink.SetPause( false );           // 再開    するとき
            bool isPause = kwThink.IsPause( );  // 状態を確認するとき

    （４）
    黒番、白番が続けてパスをした場合は対局終了です。
    思考部では  石と地の死活判定までは半自動（※）で行います。
    黒地、白地のカウントと、勝敗の判定は GUI 側で行ってください。
    勝敗判定については別のドキュメントを参照してください。

    （５）
    GUIは、対局の終了時に DoEnd( ) メソッドを  １回だけ  呼び出してください。
    kwThink.DoEnd();

        例.
            kwThink.DoEnd( );

    （６）
    GUIは、着手禁止点であるか、そうでないかの判定を
    思考エンジンに問い合わせることができます。

            bool canMove = kwThink.CanMove(
                                            int     board[]     ,
                                            bool    blackTurn   ,
                                            int     boardSize   
                                          );



1. DoBestmove( 〜 ) メソッドの引数について
==========================================

現在の局面情報を渡すことで、コンピューターが打った場所を返します。
次の引数、返り値について、順次  解説していきます。

    int DoBestmove(     int    initBoard    []   ,
                        int    kifu         [][3],
                        int    tesuu             ,
                        bool   blackTurn         ,
                        int    boardSize         ,
                        double komi              ,
                        int    endgameType       ,
                    ref int    endgameBoard []
                  )




事前知識    座標
----------------


碁盤の左上を(1,1)、右下を(19,19)とする座標を用います。
日本語の横書きテキストエディターの  （行、列）  方向と同じ感覚。

     1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19
  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
 1│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 2│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 3│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 4│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 5│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 6│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 7│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 8│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
 9│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
10│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
11│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
12│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
13│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
14│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
15│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
16│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
17│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
18│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
19│  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │  │
  └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘


KifuwarabeThink に渡す座標は  16進数 4桁  で表したときに  YYXX  と桁揃え
できるように

    （計算式）
        座標 = (Y座標)*256 + X座標

とします。
何路盤の場合でも、横幅は、常に 256 要素を持つ配列とします。

    （例）

        (x,y)=(9,12) の場合、12*256 + 9 = 3081 = 0x1209 です。

            ※C言語では先頭に0xがつくと16進数を意味します。

19路盤の例

         1       2       3    〜         9      10    〜        18      19
  ┌───┬───┬───┬  …  ┬───┬───┬  …  ┬───┬───┐
 1│0x0101│0x0102│0x0103│      │0x0109│0x010a│      │0x0112│0x0113│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
 2│0x0201│0x0202│0x0203│      │0x0209│0x020a│      │0x0212│0x0213│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
 3│0x0301│0x0302│0x0303│      │0x0309│0x030a│      │0x0312│0x0313│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
  ・      ・      ・      ・      ・      ・      ・      ・      ・      ・
〜・      ・      ・      ・      ・      ・      ・      ・      ・      ・
  ・      ・      ・      ・      ・      ・      ・      ・      ・      ・
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
15│0x0f01│0x0f02│0x0f03│      │0x0f09│0x0f0a│      │0x0f12│0x0f13│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
16│0x1001│0x1002│0x1003│      │0x1009│0x100a│      │0x1012│0x1013│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
17│0x1101│0x1102│0x1103│      │0x1109│0x110a│      │0x1112│0x1113│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
18│0x1201│0x1202│0x1203│      │0x1209│0x120a│      │0x1212│0x1213│
  ├───┼───┼───┼  …  ┼───┼───┼  …  ┼───┼───┤
19│0x1301│0x1302│0x1303│      │0x1309│0x130a│      │0x1312│0x1313│
  └───┴───┴───┴  …  ┴───┴───┴  …  ┴───┴───┘





13路盤

         1       2       3    〜         9      10      11      12      13
  ┌───┬───┬───┬  …  ┬───┬───┬───┬───┬───┐
 1│0x0101│0x0102│0x0103│      │0x0109│0x010a│0x010b│0x010c│0x010d│
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
 2│0x0201│0x0202│0x0203│      │0x0209│0x020a│0x020b│0x020c│0x020d│
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
 3│0x0301│0x0302│0x0303│      │0x0309│0x030a│0x030b│0x030c│0x030d│
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
  ・      ・      ・      ・      ・      ・      ・      ・      ・      ・
〜・      ・      ・      ・      ・      ・      ・      ・      ・      ・
  ・      ・      ・      ・      ・      ・      ・      ・      ・      ・
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
17│0x0b01│0x0b02│0x0b03│      │0x0b09│0x0b0a│0x0b0b│0x0b0c│0x0b0d│
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
18│0x0c01│0x0c02│0x0c03│      │0x0c09│0x0c0a│0x0c0b│0x0c0c│0x0c0d│
  ├───┼───┼───┼  …  ┼───┼───┼───┼───┼───┤
19│0x0d01│0x0d02│0x0d03│      │0x0d09│0x0d0a│0x0d0b│0x0d0c│0x0d0d│
  └───┴───┴───┴  …  ┴───┴───┴───┴───┴───┘





9路盤

         1       2       3       4       5       6       7       8       9
  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐
 1│0x0101│0x0102│0x0103│0x0104│0x0105│0x0106│0x0107│0x0108│0x0109│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 2│0x0201│0x0202│0x0203│0x0204│0x0205│0x0206│0x0207│0x0208│0x0209│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 3│0x0301│0x0302│0x0303│0x0304│0x0305│0x0306│0x0307│0x0308│0x0309│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 4│0x0401│0x0402│0x0403│0x0404│0x0405│0x0406│0x0407│0x0408│0x0409│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 5│0x0501│0x0502│0x0503│0x0504│0x0505│0x0506│0x0507│0x0508│0x0509│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 6│0x0601│0x0602│0x0603│0x0604│0x0605│0x0606│0x0607│0x0608│0x0609│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 7│0x0701│0x0702│0x0703│0x0704│0x0705│0x0706│0x0707│0x0708│0x0709│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 8│0x0801│0x0802│0x0803│0x0804│0x0805│0x0806│0x0807│0x0808│0x0809│
  ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
 9│0x0901│0x0902│0x0903│0x0904│0x0905│0x0906│0x0907│0x0908│0x0909│
  └───┴───┴───┴───┴───┴───┴───┴───┴───┘




第 1引数    初期盤面
--------------------

GUIは、対局開始前(手数=0)の局面を下の配列で渡してください。

    int initBoard[(19+2)*256]

これは現在手数の局面ではありません。
現在の局面が欲しい場合は、この盤面から棋譜の分だけ進めます。

黒石は1、白石は2です。
盤上の位置以外の場所は、盤外を示す 3 で埋めてください。
置き碁の場合以外は、盤上の位置は全て 0 です。

※ 本書では board[y][x] のような2次元の配列で表記しますが
   実際には 1次元の配列です。
   board[y][x] は実際には init_board[ y*256 + x ] という形です。




第 2引数    棋譜
----------------

GUIは、現在局面までの棋譜を下の形式で渡してください。

    int kifu[2048][3]

最大2048手まで保持できるようにしてください。
１手につき、３つの情報を持てるようにしてください。

kifu[][0] ... 石を置いた座標を入れてください。0x0101〜0x1313まで（19路盤）。
              パスは0を入れてください。
kifu[][1] ... 石の色を入れてください。黒が1、白が2です。
kifu[][2] ... この手を打つのにかかった時間(秒)を入れてください。

    （例）
    19路盤で、初手に黒が(16,3)、白が(4,4)に打った場合は
    kifu[0][0] = 0x0310
    kifu[0][1] = 1

    kifu[1][0] = 0x0404
    kifu[1][1] = 2
    を入れてください。




第 3引数    手数
----------------


    int tesuu

GUIは、現在の手数を渡してください。0から始まります。
10手後の局面ではtesuu=10が入り、11手目を打つことになります。




第 4引数    手番
----------------

    bool blackTurn

GUIは、黒番の時には true、白番は false を入れてください。




第 5引数    盤面の大きさ
------------------------

    int boardSize

GUIは、盤面のサイズを入れてください。19路盤では19、9路盤では9です。




第 6引数    コミ  （ハンディーキャップ）
----------------------------------------

    double komi

GUIは、6目半の時は 6.5、コミなしの時は 0 を入れてください。
実数で渡されます。




第 7引数    思考をするか、終局処理をするか
------------------------------------------

    int endgameType

GUIは、思考するのか、終局処理をするのかを示してください。以下の4種類があります。

0...通常の思考
1...終局処理（終局後の地の死活判定）
2...図形を表示
3...数値を表示

    （例）
    0の場合は通常の思考です。

    （例）
    1の場合は、思考エンジンに死活判定を行わせます。
    endgameBoard[] 引数の説明も併せて読んでください。

    （例）
    2はGUIの盤面上に丸、三角、四角、？、×、などを表示します。
    endgame_board[] に値を設定して下さい。
    思考ルーチンがこの石の死活は不明と判定している、などのテスト用に
    ご利用ください。

        図形
        ─────────────
        何も描かない        …   0
        三角形              …   1
        四角                …   2
        円                  …   3
        ×                  …   4
        "？"の記号          …   5
        横線                …   6
        縦線                …   7
        斜め、左上から右下  …   8
        斜め、左下から右上  …   9
        黒で描く（色指定)   …  10
        白で描く (色指定）  …  11

        ※コンピューター囲碁ソフト『彩』のスクリーンショット参照。


    （例）
    3はGUIの盤面上に数値を表示します。
    endgame_board[] に値を設定して下さい。
    これもテスト用です。
    設定する値の実際はソースを見てください。




第 8引数    終局処理を行うための情報、また、行った結果
------------------------------------------------------

    ref int endgameBoard []

終局処理を行う場合に使います。
この場合、GUIからは人間の手動で行った石の死活情報がある場合、
endgameBoard[] に
    石のある場所はそれが「活」か「死」か、
    空点では「ダメ」「黒地」「白地」かを
を入れて渡してください。
また、図形、数値を求める終局処理を行った後には、その結果が代入して返されます。

        死活判定ステータス
        ──────────
        活          …  0
        死          …  1       // 得点にからまない石  の場合
        セキで活    …  2       // 未使用。「活」で代用します。
        白地        …  3
        黒地        …  4
        ダメ        …  5       // 得点にからまない空点の場合

思考ルーチンが完成していない間は全ての石は活き、全ての空点はダメ、などとして
返すこととします。




返り値    石を置く座標
----------------------

    int

GUIには、コンピューターが石を置く座標が返されます。
パスの場合は 0 が入っています。




以上
